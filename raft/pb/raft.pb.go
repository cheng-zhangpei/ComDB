// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.12.4
// source: raft.proto

package __

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 事务操作类型扩展
type OperationType int32

const (
	OperationType_OP_UNKNOWN             OperationType = 0
	OperationType_OP_PUT                 OperationType = 1
	OperationType_OP_DELETE              OperationType = 2
	OperationType_OP_COMPENSATION_PUT    OperationType = 3 // 补偿PUT操作
	OperationType_OP_COMPENSATION_DELETE OperationType = 4 // 补偿DELETE操作
)

// Enum value maps for OperationType.
var (
	OperationType_name = map[int32]string{
		0: "OP_UNKNOWN",
		1: "OP_PUT",
		2: "OP_DELETE",
		3: "OP_COMPENSATION_PUT",
		4: "OP_COMPENSATION_DELETE",
	}
	OperationType_value = map[string]int32{
		"OP_UNKNOWN":             0,
		"OP_PUT":                 1,
		"OP_DELETE":              2,
		"OP_COMPENSATION_PUT":    3,
		"OP_COMPENSATION_DELETE": 4,
	}
)

func (x OperationType) Enum() *OperationType {
	p := new(OperationType)
	*p = x
	return p
}

func (x OperationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OperationType) Descriptor() protoreflect.EnumDescriptor {
	return file_raft_proto_enumTypes[0].Descriptor()
}

func (OperationType) Type() protoreflect.EnumType {
	return &file_raft_proto_enumTypes[0]
}

func (x OperationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OperationType.Descriptor instead.
func (OperationType) EnumDescriptor() ([]byte, []int) {
	return file_raft_proto_rawDescGZIP(), []int{0}
}

type MessageType int32

const (
	MessageType_MsgHup           MessageType = 0  // Trigger election
	MessageType_MsgBeat          MessageType = 1  // Heartbeat
	MessageType_MsgProp          MessageType = 2  // Propose log entry
	MessageType_MsgApp           MessageType = 3  // Append log entries
	MessageType_MsgAppResp       MessageType = 4  // Response to append
	MessageType_MsgVote          MessageType = 5  // Request vote
	MessageType_MsgVoteResp      MessageType = 6  // Response to vote
	MessageType_MsgSnap          MessageType = 7  // Install snapshot
	MessageType_MsgHeartbeat     MessageType = 8  // Leader heartbeat
	MessageType_MsgHeartbeatResp MessageType = 9  // Response to heartbeat
	MessageType_MsgCommitTxn     MessageType = 10 // Txn request
	MessageType_MsgCommitTxnResp MessageType = 11 // Txn commit response
	MessageType_MsgCompensation  MessageType = 12 // Compensation txn trigger
)

// Enum value maps for MessageType.
var (
	MessageType_name = map[int32]string{
		0:  "MsgHup",
		1:  "MsgBeat",
		2:  "MsgProp",
		3:  "MsgApp",
		4:  "MsgAppResp",
		5:  "MsgVote",
		6:  "MsgVoteResp",
		7:  "MsgSnap",
		8:  "MsgHeartbeat",
		9:  "MsgHeartbeatResp",
		10: "MsgCommitTxn",
		11: "MsgCommitTxnResp",
		12: "MsgCompensation",
	}
	MessageType_value = map[string]int32{
		"MsgHup":           0,
		"MsgBeat":          1,
		"MsgProp":          2,
		"MsgApp":           3,
		"MsgAppResp":       4,
		"MsgVote":          5,
		"MsgVoteResp":      6,
		"MsgSnap":          7,
		"MsgHeartbeat":     8,
		"MsgHeartbeatResp": 9,
		"MsgCommitTxn":     10,
		"MsgCommitTxnResp": 11,
		"MsgCompensation":  12,
	}
)

func (x MessageType) Enum() *MessageType {
	p := new(MessageType)
	*p = x
	return p
}

func (x MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_raft_proto_enumTypes[1].Descriptor()
}

func (MessageType) Type() protoreflect.EnumType {
	return &file_raft_proto_enumTypes[1]
}

func (x MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageType.Descriptor instead.
func (MessageType) EnumDescriptor() ([]byte, []int) {
	return file_raft_proto_rawDescGZIP(), []int{1}
}

// ---------------------------
// 新增枚举类型
// ---------------------------
type EntryType int32

const (
	EntryType_ENTRY_NORMAL           EntryType = 0
	EntryType_ENTRY_CONF_CHANGE      EntryType = 1
	EntryType_ENTRY_TXN              EntryType = 2
	EntryType_ENTRY_TXN_COMPENSATION EntryType = 3
)

// Enum value maps for EntryType.
var (
	EntryType_name = map[int32]string{
		0: "ENTRY_NORMAL",
		1: "ENTRY_CONF_CHANGE",
		2: "ENTRY_TXN",
		3: "ENTRY_TXN_COMPENSATION",
	}
	EntryType_value = map[string]int32{
		"ENTRY_NORMAL":           0,
		"ENTRY_CONF_CHANGE":      1,
		"ENTRY_TXN":              2,
		"ENTRY_TXN_COMPENSATION": 3,
	}
)

func (x EntryType) Enum() *EntryType {
	p := new(EntryType)
	*p = x
	return p
}

func (x EntryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntryType) Descriptor() protoreflect.EnumDescriptor {
	return file_raft_proto_enumTypes[2].Descriptor()
}

func (EntryType) Type() protoreflect.EnumType {
	return &file_raft_proto_enumTypes[2]
}

func (x EntryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EntryType.Descriptor instead.
func (EntryType) EnumDescriptor() ([]byte, []int) {
	return file_raft_proto_rawDescGZIP(), []int{2}
}

type TransactionPhase int32

const (
	TransactionPhase_PHASE_UNKNOWN    TransactionPhase = 0
	TransactionPhase_PHASE_PREPARE    TransactionPhase = 1
	TransactionPhase_PHASE_COMMIT     TransactionPhase = 2
	TransactionPhase_PHASE_COMPENSATE TransactionPhase = 3
	TransactionPhase_PHASE_ACK        TransactionPhase = 4
)

// Enum value maps for TransactionPhase.
var (
	TransactionPhase_name = map[int32]string{
		0: "PHASE_UNKNOWN",
		1: "PHASE_PREPARE",
		2: "PHASE_COMMIT",
		3: "PHASE_COMPENSATE",
		4: "PHASE_ACK",
	}
	TransactionPhase_value = map[string]int32{
		"PHASE_UNKNOWN":    0,
		"PHASE_PREPARE":    1,
		"PHASE_COMMIT":     2,
		"PHASE_COMPENSATE": 3,
		"PHASE_ACK":        4,
	}
)

func (x TransactionPhase) Enum() *TransactionPhase {
	p := new(TransactionPhase)
	*p = x
	return p
}

func (x TransactionPhase) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionPhase) Descriptor() protoreflect.EnumDescriptor {
	return file_raft_proto_enumTypes[3].Descriptor()
}

func (TransactionPhase) Type() protoreflect.EnumType {
	return &file_raft_proto_enumTypes[3]
}

func (x TransactionPhase) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionPhase.Descriptor instead.
func (TransactionPhase) EnumDescriptor() ([]byte, []int) {
	return file_raft_proto_rawDescGZIP(), []int{3}
}

// Raft message types
// 补偿触发指令
type CompensationTrigger struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OriginalTxnId string                 `protobuf:"bytes,1,opt,name=original_txn_id,json=originalTxnId,proto3" json:"original_txn_id,omitempty"` // 原始事务ID
	TriggerTerm   uint64                 `protobuf:"varint,2,opt,name=trigger_term,json=triggerTerm,proto3" json:"trigger_term,omitempty"`        // 触发补偿的任期
	Reason        string                 `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`                                      // 补偿原因(冲突/超时等)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CompensationTrigger) Reset() {
	*x = CompensationTrigger{}
	mi := &file_raft_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompensationTrigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompensationTrigger) ProtoMessage() {}

func (x *CompensationTrigger) ProtoReflect() protoreflect.Message {
	mi := &file_raft_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompensationTrigger.ProtoReflect.Descriptor instead.
func (*CompensationTrigger) Descriptor() ([]byte, []int) {
	return file_raft_proto_rawDescGZIP(), []int{0}
}

func (x *CompensationTrigger) GetOriginalTxnId() string {
	if x != nil {
		return x.OriginalTxnId
	}
	return ""
}

func (x *CompensationTrigger) GetTriggerTerm() uint64 {
	if x != nil {
		return x.TriggerTerm
	}
	return 0
}

func (x *CompensationTrigger) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

// Core data structures
type Entry struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Term  uint64                 `protobuf:"varint,1,opt,name=term,proto3" json:"term,omitempty"`
	Index uint64                 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	Type  string                 `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"` // EntryNormal or EntryConfChange
	// Types that are valid to be assigned to Payload:
	//
	//	*Entry_RawData
	//	*Entry_Txn
	//	*Entry_Comp
	Payload isEntry_Payload `protobuf_oneof:"payload"`
	// 版本控制增强
	DataVersion   uint64 `protobuf:"varint,7,opt,name=data_version,json=dataVersion,proto3" json:"data_version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Entry) Reset() {
	*x = Entry{}
	mi := &file_raft_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Entry) ProtoMessage() {}

func (x *Entry) ProtoReflect() protoreflect.Message {
	mi := &file_raft_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Entry.ProtoReflect.Descriptor instead.
func (*Entry) Descriptor() ([]byte, []int) {
	return file_raft_proto_rawDescGZIP(), []int{1}
}

func (x *Entry) GetTerm() uint64 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *Entry) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Entry) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Entry) GetPayload() isEntry_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *Entry) GetRawData() []byte {
	if x != nil {
		if x, ok := x.Payload.(*Entry_RawData); ok {
			return x.RawData
		}
	}
	return nil
}

func (x *Entry) GetTxn() *TransactionPackage {
	if x != nil {
		if x, ok := x.Payload.(*Entry_Txn); ok {
			return x.Txn
		}
	}
	return nil
}

func (x *Entry) GetComp() *CompensationTrigger {
	if x != nil {
		if x, ok := x.Payload.(*Entry_Comp); ok {
			return x.Comp
		}
	}
	return nil
}

func (x *Entry) GetDataVersion() uint64 {
	if x != nil {
		return x.DataVersion
	}
	return 0
}

type isEntry_Payload interface {
	isEntry_Payload()
}

type Entry_RawData struct {
	RawData []byte `protobuf:"bytes,4,opt,name=raw_data,json=rawData,proto3,oneof"` // 原始数据负载
}

type Entry_Txn struct {
	Txn *TransactionPackage `protobuf:"bytes,5,opt,name=txn,proto3,oneof"` // 事务数据包
}

type Entry_Comp struct {
	Comp *CompensationTrigger `protobuf:"bytes,6,opt,name=comp,proto3,oneof"` // 补偿触发指令
}

func (*Entry_RawData) isEntry_Payload() {}

func (*Entry_Txn) isEntry_Payload() {}

func (*Entry_Comp) isEntry_Payload() {}

type Snapshot struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []byte                 `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Metadata      *SnapshotMetadata      `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Snapshot) Reset() {
	*x = Snapshot{}
	mi := &file_raft_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Snapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Snapshot) ProtoMessage() {}

func (x *Snapshot) ProtoReflect() protoreflect.Message {
	mi := &file_raft_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Snapshot.ProtoReflect.Descriptor instead.
func (*Snapshot) Descriptor() ([]byte, []int) {
	return file_raft_proto_rawDescGZIP(), []int{2}
}

func (x *Snapshot) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Snapshot) GetMetadata() *SnapshotMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type SnapshotMetadata struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ConfState     *ConfState             `protobuf:"bytes,1,opt,name=conf_state,json=confState,proto3" json:"conf_state,omitempty"`
	Index         uint64                 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	Term          uint64                 `protobuf:"varint,3,opt,name=term,proto3" json:"term,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SnapshotMetadata) Reset() {
	*x = SnapshotMetadata{}
	mi := &file_raft_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SnapshotMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotMetadata) ProtoMessage() {}

func (x *SnapshotMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_raft_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotMetadata.ProtoReflect.Descriptor instead.
func (*SnapshotMetadata) Descriptor() ([]byte, []int) {
	return file_raft_proto_rawDescGZIP(), []int{3}
}

func (x *SnapshotMetadata) GetConfState() *ConfState {
	if x != nil {
		return x.ConfState
	}
	return nil
}

func (x *SnapshotMetadata) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *SnapshotMetadata) GetTerm() uint64 {
	if x != nil {
		return x.Term
	}
	return 0
}

type ConfState struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Voters        []uint64               `protobuf:"varint,1,rep,packed,name=voters,proto3" json:"voters,omitempty"`
	Learners      []uint64               `protobuf:"varint,2,rep,packed,name=learners,proto3" json:"learners,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConfState) Reset() {
	*x = ConfState{}
	mi := &file_raft_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfState) ProtoMessage() {}

func (x *ConfState) ProtoReflect() protoreflect.Message {
	mi := &file_raft_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfState.ProtoReflect.Descriptor instead.
func (*ConfState) Descriptor() ([]byte, []int) {
	return file_raft_proto_rawDescGZIP(), []int{4}
}

func (x *ConfState) GetVoters() []uint64 {
	if x != nil {
		return x.Voters
	}
	return nil
}

func (x *ConfState) GetLearners() []uint64 {
	if x != nil {
		return x.Learners
	}
	return nil
}

type ConfChange struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          string                 `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"` // ConfChangeAddNode, ConfChangeRemoveNode, etc.
	NodeId        uint64                 `protobuf:"varint,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Context       []byte                 `protobuf:"bytes,3,opt,name=context,proto3" json:"context,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConfChange) Reset() {
	*x = ConfChange{}
	mi := &file_raft_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfChange) ProtoMessage() {}

func (x *ConfChange) ProtoReflect() protoreflect.Message {
	mi := &file_raft_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfChange.ProtoReflect.Descriptor instead.
func (*ConfChange) Descriptor() ([]byte, []int) {
	return file_raft_proto_rawDescGZIP(), []int{5}
}

func (x *ConfChange) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ConfChange) GetNodeId() uint64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *ConfChange) GetContext() []byte {
	if x != nil {
		return x.Context
	}
	return nil
}

// 事务操作单元
type TxnOperation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value         []byte                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	OpType        OperationType          `protobuf:"varint,3,opt,name=op_type,json=opType,proto3,enum=pb.OperationType" json:"op_type,omitempty"`
	Metadata      map[string][]byte      `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 扩展元数据
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TxnOperation) Reset() {
	*x = TxnOperation{}
	mi := &file_raft_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TxnOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxnOperation) ProtoMessage() {}

func (x *TxnOperation) ProtoReflect() protoreflect.Message {
	mi := &file_raft_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxnOperation.ProtoReflect.Descriptor instead.
func (*TxnOperation) Descriptor() ([]byte, []int) {
	return file_raft_proto_rawDescGZIP(), []int{6}
}

func (x *TxnOperation) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *TxnOperation) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *TxnOperation) GetOpType() OperationType {
	if x != nil {
		return x.OpType
	}
	return OperationType_OP_UNKNOWN
}

func (x *TxnOperation) GetMetadata() map[string][]byte {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// 完整事务包
type TransactionPackage struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TxnId           string                 `protobuf:"bytes,1,opt,name=txn_id,json=txnId,proto3" json:"txn_id,omitempty"`                                // 全局唯一事务ID
	Timestamp       uint64                 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                    // 混合授时时间戳
	ExpectedVersion uint64                 `protobuf:"varint,3,opt,name=expected_version,json=expectedVersion,proto3" json:"expected_version,omitempty"` // 用于MVCC的版本控制
	IsCompensation  bool                   `protobuf:"varint,4,opt,name=is_compensation,json=isCompensation,proto3" json:"is_compensation,omitempty"`    // 是否补偿事务
	Operations      []*TxnOperation        `protobuf:"bytes,5,rep,name=operations,proto3" json:"operations,omitempty"`
	CompensationOps []*TxnOperation        `protobuf:"bytes,6,rep,name=compensation_ops,json=compensationOps,proto3" json:"compensation_ops,omitempty"` // 预定义的补偿操作
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *TransactionPackage) Reset() {
	*x = TransactionPackage{}
	mi := &file_raft_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionPackage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionPackage) ProtoMessage() {}

func (x *TransactionPackage) ProtoReflect() protoreflect.Message {
	mi := &file_raft_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionPackage.ProtoReflect.Descriptor instead.
func (*TransactionPackage) Descriptor() ([]byte, []int) {
	return file_raft_proto_rawDescGZIP(), []int{7}
}

func (x *TransactionPackage) GetTxnId() string {
	if x != nil {
		return x.TxnId
	}
	return ""
}

func (x *TransactionPackage) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *TransactionPackage) GetExpectedVersion() uint64 {
	if x != nil {
		return x.ExpectedVersion
	}
	return 0
}

func (x *TransactionPackage) GetIsCompensation() bool {
	if x != nil {
		return x.IsCompensation
	}
	return false
}

func (x *TransactionPackage) GetOperations() []*TxnOperation {
	if x != nil {
		return x.Operations
	}
	return nil
}

func (x *TransactionPackage) GetCompensationOps() []*TxnOperation {
	if x != nil {
		return x.CompensationOps
	}
	return nil
}

type Message struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	Type       MessageType            `protobuf:"varint,1,opt,name=type,proto3,enum=pb.MessageType" json:"type,omitempty"`
	To         uint64                 `protobuf:"varint,2,opt,name=to,proto3" json:"to,omitempty"`
	From       uint64                 `protobuf:"varint,3,opt,name=from,proto3" json:"from,omitempty"`
	Term       uint64                 `protobuf:"varint,4,opt,name=term,proto3" json:"term,omitempty"`
	Index      uint64                 `protobuf:"varint,6,opt,name=index,proto3" json:"index,omitempty"`
	Entries    []*Entry               `protobuf:"bytes,7,rep,name=entries,proto3" json:"entries,omitempty"`
	Commit     uint64                 `protobuf:"varint,8,opt,name=commit,proto3" json:"commit,omitempty"`
	RejectHint uint64                 `protobuf:"varint,9,opt,name=rejectHint,proto3" json:"rejectHint,omitempty"`
	Snapshot   *Snapshot              `protobuf:"bytes,10,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
	Reject     bool                   `protobuf:"varint,11,opt,name=reject,proto3" json:"reject,omitempty"`
	Context    []byte                 `protobuf:"bytes,12,opt,name=context,proto3" json:"context,omitempty"`
	LogTerm    uint64                 `protobuf:"varint,13,opt,name=logTerm,proto3" json:"logTerm,omitempty"`
	// 事务相关扩展
	TxnContextId  string           `protobuf:"bytes,14,opt,name=txn_context_id,json=txnContextId,proto3" json:"txn_context_id,omitempty"`             // 事务上下文ID
	TxnPhase      TransactionPhase `protobuf:"varint,15,opt,name=txn_phase,json=txnPhase,proto3,enum=pb.TransactionPhase" json:"txn_phase,omitempty"` // 事务阶段
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Message) Reset() {
	*x = Message{}
	mi := &file_raft_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_raft_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_raft_proto_rawDescGZIP(), []int{8}
}

func (x *Message) GetType() MessageType {
	if x != nil {
		return x.Type
	}
	return MessageType_MsgHup
}

func (x *Message) GetTo() uint64 {
	if x != nil {
		return x.To
	}
	return 0
}

func (x *Message) GetFrom() uint64 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *Message) GetTerm() uint64 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *Message) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Message) GetEntries() []*Entry {
	if x != nil {
		return x.Entries
	}
	return nil
}

func (x *Message) GetCommit() uint64 {
	if x != nil {
		return x.Commit
	}
	return 0
}

func (x *Message) GetRejectHint() uint64 {
	if x != nil {
		return x.RejectHint
	}
	return 0
}

func (x *Message) GetSnapshot() *Snapshot {
	if x != nil {
		return x.Snapshot
	}
	return nil
}

func (x *Message) GetReject() bool {
	if x != nil {
		return x.Reject
	}
	return false
}

func (x *Message) GetContext() []byte {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *Message) GetLogTerm() uint64 {
	if x != nil {
		return x.LogTerm
	}
	return 0
}

func (x *Message) GetTxnContextId() string {
	if x != nil {
		return x.TxnContextId
	}
	return ""
}

func (x *Message) GetTxnPhase() TransactionPhase {
	if x != nil {
		return x.TxnPhase
	}
	return TransactionPhase_PHASE_UNKNOWN
}

type TxnResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Success         bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	TxnId           string                 `protobuf:"bytes,2,opt,name=txn_id,json=txnId,proto3" json:"txn_id,omitempty"`
	ConflictedNodes []uint64               `protobuf:"varint,3,rep,packed,name=conflicted_nodes,json=conflictedNodes,proto3" json:"conflicted_nodes,omitempty"`
	ErrorDetail     string                 `protobuf:"bytes,4,opt,name=error_detail,json=errorDetail,proto3" json:"error_detail,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *TxnResponse) Reset() {
	*x = TxnResponse{}
	mi := &file_raft_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TxnResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxnResponse) ProtoMessage() {}

func (x *TxnResponse) ProtoReflect() protoreflect.Message {
	mi := &file_raft_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxnResponse.ProtoReflect.Descriptor instead.
func (*TxnResponse) Descriptor() ([]byte, []int) {
	return file_raft_proto_rawDescGZIP(), []int{9}
}

func (x *TxnResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *TxnResponse) GetTxnId() string {
	if x != nil {
		return x.TxnId
	}
	return ""
}

func (x *TxnResponse) GetConflictedNodes() []uint64 {
	if x != nil {
		return x.ConflictedNodes
	}
	return nil
}

func (x *TxnResponse) GetErrorDetail() string {
	if x != nil {
		return x.ErrorDetail
	}
	return ""
}

var File_raft_proto protoreflect.FileDescriptor

var file_raft_proto_rawDesc = string([]byte{
	0x0a, 0x0a, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62,
	0x22, 0x78, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x78, 0x6e, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x65,
	0x72, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xeb, 0x01, 0x0a, 0x05, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x1b, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x07, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x2a, 0x0a, 0x03, 0x74, 0x78, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70,
	0x62, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x03, 0x74, 0x78, 0x6e, 0x12, 0x2d, 0x0a, 0x04, 0x63,
	0x6f, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x48, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x6d, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x09, 0x0a,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x50, 0x0a, 0x08, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x62, 0x2e,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x6a, 0x0a, 0x10, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2c,
	0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x22, 0x3f, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x66, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x04, 0x52, 0x06, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x65, 0x61, 0x72, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x08, 0x6c,
	0x65, 0x61, 0x72, 0x6e, 0x65, 0x72, 0x73, 0x22, 0x53, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x66, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0xdb, 0x01, 0x0a,
	0x0c, 0x54, 0x78, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2a, 0x0a, 0x07, 0x6f, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x6f, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x3a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x78, 0x6e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a,
	0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8c, 0x02, 0x0a, 0x12, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x78, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x78, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0f, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x43, 0x6f,
	0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x0a, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x70, 0x62, 0x2e, 0x54, 0x78, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3b, 0x0a, 0x10,
	0x63, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x78, 0x6e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x6e,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x73, 0x22, 0xa8, 0x03, 0x0a, 0x07, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x65,
	0x72, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x23, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x48,
	0x69, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x72, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x48, 0x69, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x54, 0x65, 0x72, 0x6d, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x24, 0x0a, 0x0e, 0x74,
	0x78, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x78, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49,
	0x64, 0x12, 0x31, 0x0a, 0x09, 0x74, 0x78, 0x6e, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x08, 0x74, 0x78, 0x6e, 0x50,
	0x68, 0x61, 0x73, 0x65, 0x22, 0x8c, 0x01, 0x0a, 0x0b, 0x54, 0x78, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x15,
	0x0a, 0x06, 0x74, 0x78, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x78, 0x6e, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63,
	0x74, 0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52,
	0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x2a, 0x6f, 0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x4f, 0x50, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x50, 0x5f, 0x50, 0x55, 0x54, 0x10, 0x01,
	0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x50, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x02, 0x12,
	0x17, 0x0a, 0x13, 0x4f, 0x50, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x45, 0x4e, 0x53, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x50, 0x55, 0x54, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x50, 0x5f, 0x43,
	0x4f, 0x4d, 0x50, 0x45, 0x4e, 0x53, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4c, 0x45,
	0x54, 0x45, 0x10, 0x04, 0x2a, 0xdf, 0x01, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x73, 0x67, 0x48, 0x75, 0x70, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x73, 0x67, 0x42, 0x65, 0x61, 0x74, 0x10, 0x01, 0x12, 0x0b, 0x0a,
	0x07, 0x4d, 0x73, 0x67, 0x50, 0x72, 0x6f, 0x70, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x73,
	0x67, 0x41, 0x70, 0x70, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x73, 0x67, 0x41, 0x70, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x73, 0x67, 0x56, 0x6f, 0x74,
	0x65, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x73, 0x67, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x73, 0x67, 0x53, 0x6e, 0x61, 0x70, 0x10,
	0x07, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x73, 0x67, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61,
	0x74, 0x10, 0x08, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x73, 0x67, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62,
	0x65, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x10, 0x09, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x73, 0x67,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x54, 0x78, 0x6e, 0x10, 0x0a, 0x12, 0x14, 0x0a, 0x10, 0x4d,
	0x73, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x54, 0x78, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x10,
	0x0b, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x10, 0x0c, 0x2a, 0x5f, 0x0a, 0x09, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x4e, 0x4f, 0x52,
	0x4d, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43,
	0x4f, 0x4e, 0x46, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09,
	0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x54, 0x58, 0x4e, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x45,
	0x4e, 0x54, 0x52, 0x59, 0x5f, 0x54, 0x58, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x45, 0x4e, 0x53,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x2a, 0x6f, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x50,
	0x48, 0x41, 0x53, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x11,
	0x0a, 0x0d, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x45, 0x10,
	0x01, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49,
	0x54, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x4d,
	0x50, 0x45, 0x4e, 0x53, 0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x48, 0x41,
	0x53, 0x45, 0x5f, 0x41, 0x43, 0x4b, 0x10, 0x04, 0x32, 0xb0, 0x01, 0x0a, 0x04, 0x52, 0x61, 0x66,
	0x74, 0x12, 0x27, 0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x0b, 0x2e,
	0x70, 0x62, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3c, 0x0a, 0x11, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x16, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x1a, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x78, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x70,
	0x65, 0x6e, 0x73, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x1a, 0x0f, 0x2e, 0x70, 0x62, 0x2e,
	0x54, 0x78, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x03, 0x5a, 0x01, 0x2e,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_raft_proto_rawDescOnce sync.Once
	file_raft_proto_rawDescData []byte
)

func file_raft_proto_rawDescGZIP() []byte {
	file_raft_proto_rawDescOnce.Do(func() {
		file_raft_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_raft_proto_rawDesc), len(file_raft_proto_rawDesc)))
	})
	return file_raft_proto_rawDescData
}

var file_raft_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_raft_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_raft_proto_goTypes = []any{
	(OperationType)(0),          // 0: pb.OperationType
	(MessageType)(0),            // 1: pb.MessageType
	(EntryType)(0),              // 2: pb.EntryType
	(TransactionPhase)(0),       // 3: pb.TransactionPhase
	(*CompensationTrigger)(nil), // 4: pb.CompensationTrigger
	(*Entry)(nil),               // 5: pb.Entry
	(*Snapshot)(nil),            // 6: pb.Snapshot
	(*SnapshotMetadata)(nil),    // 7: pb.SnapshotMetadata
	(*ConfState)(nil),           // 8: pb.ConfState
	(*ConfChange)(nil),          // 9: pb.ConfChange
	(*TxnOperation)(nil),        // 10: pb.TxnOperation
	(*TransactionPackage)(nil),  // 11: pb.TransactionPackage
	(*Message)(nil),             // 12: pb.Message
	(*TxnResponse)(nil),         // 13: pb.TxnResponse
	nil,                         // 14: pb.TxnOperation.MetadataEntry
}
var file_raft_proto_depIdxs = []int32{
	11, // 0: pb.Entry.txn:type_name -> pb.TransactionPackage
	4,  // 1: pb.Entry.comp:type_name -> pb.CompensationTrigger
	7,  // 2: pb.Snapshot.metadata:type_name -> pb.SnapshotMetadata
	8,  // 3: pb.SnapshotMetadata.conf_state:type_name -> pb.ConfState
	0,  // 4: pb.TxnOperation.op_type:type_name -> pb.OperationType
	14, // 5: pb.TxnOperation.metadata:type_name -> pb.TxnOperation.MetadataEntry
	10, // 6: pb.TransactionPackage.operations:type_name -> pb.TxnOperation
	10, // 7: pb.TransactionPackage.compensation_ops:type_name -> pb.TxnOperation
	1,  // 8: pb.Message.type:type_name -> pb.MessageType
	5,  // 9: pb.Message.entries:type_name -> pb.Entry
	6,  // 10: pb.Message.snapshot:type_name -> pb.Snapshot
	3,  // 11: pb.Message.txn_phase:type_name -> pb.TransactionPhase
	12, // 12: pb.Raft.SendMessage:input_type -> pb.Message
	11, // 13: pb.Raft.CommitTransaction:input_type -> pb.TransactionPackage
	4,  // 14: pb.Raft.CompensateTransaction:input_type -> pb.CompensationTrigger
	12, // 15: pb.Raft.SendMessage:output_type -> pb.Message
	13, // 16: pb.Raft.CommitTransaction:output_type -> pb.TxnResponse
	13, // 17: pb.Raft.CompensateTransaction:output_type -> pb.TxnResponse
	15, // [15:18] is the sub-list for method output_type
	12, // [12:15] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_raft_proto_init() }
func file_raft_proto_init() {
	if File_raft_proto != nil {
		return
	}
	file_raft_proto_msgTypes[1].OneofWrappers = []any{
		(*Entry_RawData)(nil),
		(*Entry_Txn)(nil),
		(*Entry_Comp)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_raft_proto_rawDesc), len(file_raft_proto_rawDesc)),
			NumEnums:      4,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_raft_proto_goTypes,
		DependencyIndexes: file_raft_proto_depIdxs,
		EnumInfos:         file_raft_proto_enumTypes,
		MessageInfos:      file_raft_proto_msgTypes,
	}.Build()
	File_raft_proto = out.File
	file_raft_proto_goTypes = nil
	file_raft_proto_depIdxs = nil
}
