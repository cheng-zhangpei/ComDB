syntax = "proto3";
package pb;
option go_package = ".";
// Raft message types


// Core data structures
message Entry {
  uint64 term = 1;
  uint64 index = 2;
  string type = 3; // EntryNormal or EntryConfChange
  bytes data = 4;
}

message Snapshot {
  bytes data = 1;
  SnapshotMetadata metadata = 2;
}

message SnapshotMetadata {
  ConfState conf_state = 1;
  uint64 index = 2;
  uint64 term = 3;
}

message ConfState {
  repeated uint64 voters = 1;
  repeated uint64 learners = 2;
}

message ConfChange {
  string type = 1; // ConfChangeAddNode, ConfChangeRemoveNode, etc.
  uint64 node_id = 2;
  bytes context = 3;
}
enum MessageType {
  MsgHup             = 0;  // Trigger election
  MsgBeat            = 1;  // Heartbeat
  MsgProp            = 2;  // Propose log entry
  MsgApp             = 3;  // Append log entries
  MsgAppResp         = 4;  // Response to append
  MsgVote            = 5;  // Request vote
  MsgVoteResp        = 6;  // Response to vote
  MsgSnap            = 7;  // Install snapshot
  MsgHeartbeat       = 8;  // Leader heartbeat
  MsgHeartbeatResp   = 9;  // Response to heartbeat
}

message Message {
  MessageType type = 1;
  uint64 to = 2;
  uint64 from = 3;
  uint64 term = 4;
  uint64 index = 6;
  repeated Entry entries = 7;
  uint64 commit = 8;
  uint64 rejectHint = 9;
  Snapshot snapshot = 10;
  bool reject = 11;
  bytes context = 12;
  uint64 logTerm = 13;
}

// Raft RPC service
service Raft {
  rpc SendMessage(Message) returns (Message);
}