syntax = "proto3";
package pb;
option go_package = ".";
// Raft message types


// Core data structures
message Entry {
  uint64 term = 1;
  uint64 index = 2;
  string type = 3; // EntryNormal or EntryConfChange
  bytes data = 4;
}

message Snapshot {
  bytes data = 1;
  SnapshotMetadata metadata = 2;
}

message SnapshotMetadata {
  ConfState conf_state = 1;
  uint64 index = 2;
  uint64 term = 3;
}

message ConfState {
  repeated uint64 voters = 1;
  repeated uint64 learners = 2;
}

message ConfChange {
  string type = 1; // ConfChangeAddNode, ConfChangeRemoveNode, etc.
  uint64 node_id = 2;
  bytes context = 3;
}
enum MessageType {
  MsgHup             = 0;  // Trigger election
  MsgBeat            = 1;  // Heartbeat
  MsgProp            = 2;  // Propose log entry
  MsgApp             = 3;  // Append log entries
  MsgAppResp         = 4;  // Response to append
  MsgVote            = 5;  // Request vote
  MsgVoteResp        = 6;  // Response to vote
  MsgSnap            = 7;  // Install snapshot
  MsgHeartbeat       = 8;  // Leader heartbeat
  MsgHeartbeatResp   = 9;  // Response to heartbeat
}

message Message {
  MessageType type = 1;
  uint64 to = 2;
  uint64 from = 3;
  uint64 term = 4;
  uint64 index = 6;
  repeated Entry entries = 7;
  uint64 commit = 8;
  uint64 rejectHint = 9;
  Snapshot snapshot = 10;
  bool reject = 11;
  bytes context = 12;
  uint64 logTerm = 13;
}

// Raft RPC service
service Raft {
  // Request Vote to start leadership election
  rpc Vote(VoteRequest) returns (VoteResponse);

  // Send Heartbeat from leader to followers
  rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse);

  // Append entries to the log
  rpc AppendEntries(AppendEntriesRequest) returns (AppendEntriesResponse);
}

// Request and response messages for Vote
message VoteRequest {
  uint64 term = 1; // Candidate's term
  uint64 candidate_id = 2; // Candidate requesting vote
  uint64 last_log_index = 3; // Index of candidate's last log entry
  uint64 last_log_term = 4; // Term of candidate's last log entry
}

message VoteResponse {
  uint64 term = 1; // Current term for candidate to update itself
  bool vote_granted = 2; // True means candidate received vote
}

// Request and response messages for Heartbeat
message HeartbeatRequest {
  uint64 term = 1; // Leader's term
  uint64 leader_id = 2; // Leader's identifier
  uint64 prev_log_index = 3; // Index of log entry prior to new ones
  uint64 prev_log_term = 4; // Term of prev_log_index entry
  repeated Entry entries = 5; // Log entries to store (empty for heartbeat)
  uint64 leader_commit = 6; // Leader's commit index
}

message HeartbeatResponse {
  uint64 term = 1; // Current term for leader to update
  bool success = 2; // True if follower contained matching log entry
}

// Request and response messages for AppendEntries
message AppendEntriesRequest {
  uint64 term = 1; // Leader's term
  uint64 leader_id = 2; // Leader's identifier
  uint64 prev_log_index = 3; // Index of log entry prior to new ones
  uint64 prev_log_term = 4; // Term of prev_log_index entry
  repeated Entry entries = 5; // Log entries to store (empty for heartbeat)
  uint64 leader_commit = 6; // Leader's commit index
}

message AppendEntriesResponse {
  uint64 term = 1; // Current term for leader to update
  bool success = 2; // True if follower contained matching log entry
}